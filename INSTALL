Installation Instructions
*************************

Copyright (C) 2013 Luotao Fu <devtty0@gmail.com>

   Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.  This file is offered as-is,
without warranty of any kind.

1. +++++++++++++++++++++ Create Build environment +++++++++++++++++++++

If you just get this package from git, you will need to create the build
environment first, otherwise you can skip this step. This software is
prepared with autotools, so creating a build environment is not actually
hard. Just call
"autoreconf"
However you must have autoconf/automake installed on your system previously. At
time of writing the author is using
autoconf 2.69
automake 1.11.6
Other versions might work also, should not differ too much though.


2. ++++++++++++++++++++++ Dependencies ++++++++++++++++++++++++++++++++

Make sure to have following libraries on your target or your host before trying
to compile this software:
* libasound3
* libconfuse
* libmpd
NOTE: Depeding on your distribution you might also need the "devel" packages to
these libraries. On a debian (wheezy)/ubuntu (quantal) machine you should have
installed following packages:
libmpd-dev
libasound2-dev
libconfuse-dev

No version depedencies is known yet.


3. ++++++++++++++++++++++ Build the stuff +++++++++++++++++++++++++++++

We have two possbile ways to build the software:
a. build on the target directly
or
b. cross compile on a host


3.1 +++++++++++++++++++ Build on the target +++++++++++++++++++++++++++

Building on the target is straigt forware ./configure; make; make install. If
you need more info on this, please refer to the stand INSTALL instruction in the
file INSTALL.autotools. Just make sure that you have a compiler on your target.
;-)

NOTE: library dependencies will be checked while running configure. If some
libraries are missing. The configure script will fail.

3.2 +++++++++++++++++++++++ Build on host +++++++++++++++++++++++++++++

In the most case you don't really want to do compiling on a the target.
Crosscompiling is a little complexer, but eventually much more comfortable. To
do this you will at least need the following:

I). Cross compile toolchain: Most Linux distributions ship cross compile
toolchains. They are however mostly quite ooooold. Depending on the architecture
of your target you definitively want some modern toolchains. You can build one
yourself using e.g. ptxdist (www.ptxdist.org) or just fetch some prebuild
toolchains (from e.g. www.oselas.org). The author has a Raspberry Pi target and
uses a prebuilt linaro toolchain from the raspberry foundation.
arm-linux-gnueabihf-gcc (crosstool-NG linaro-1.13.1+bzr2458 - Linaro GCC 2012.08) 4.7.2 20120731 (prerelease)

II). A target sysroot: The software has some dependecies to dynanmic libraries
(see below). These libraries and the belonging headers has to be found while
building the sofware. The simplest way to get access to the sysroot if you
alread have a running target is to rsync the directories from your target (/usr
should be enough for our purpose) to the host machine. The author uses e.g. this:
sudo rsync -r -t -p -o -g -v --progress --ignore-existing -l -H -z -s -e ssh root@TARGET:/usr /data/stuffs/Raspberry/bin_root/
Alternatively you could also mount the target to your host via nfs.

Now we can proceed to do the build. It works quite the same way as building on
the target, only you have to add some extra parameters while calling configure.
The parameters should contain following information:
 * prefix of the toolchain (--host)
 * location of the sysroot (--with-sysroot)
 * (optional) architecture of the host machine (--build).
script. E.g. the author uses the cross compiler arm-linux-gnueabihf-gcc on a
x86_64 machine, the target sysroot is located in
/data/stuffs/Raspberry/bin_root/. The configure call will than look like this:
./configure --host=arm-linux-gnueabihf --build=x86_64-host-linux-gnu --with-sysroot=/data/stuffs/Raspberry/bin_root

After the configure succeeded, you might have to copy the binary manually, since
depending on how you mounted the target, s simple "make install" might not put
the binary onto your target. You will find the binary in the directory src/.


4. ++++++++++++ Installing scripts and help files +++++++++++++++++++++

After installed the binary you might still need some more files to get the
software up and running:
* at least a playlist is needed, since the software will otherwise not know
  which to connect. You can find the authors playlist in the docs/ directory.
  Mostly this file goes into /var/lib/mpd/playlists on the target. It might vary
  depdending on your mpd configuration though.
* This software comes with built-in default values for all configurable
  parameters. Hence a configuration file is not mandatory. If you want to set up
  own stuffs, pleas take the configuration file radioberry.conf from the
  scripts/ directory and copy this into /etc onto your target. Function of the
  parameters are listed in the configuration file itself.
* startup script is needed, if you want to start the software while booting.
  Such a script is simple and might differ greatly depending on purpose of the
  user, hence it is not shipped with this package. The software doesn't go to
  background for itself. Generally the  author sugests to use
  "start-stop-daemon" to start the application as a daemon. Example:
  sudo start-stop-daemon -S -b -x $PATH_TO_RADIOBERRY_BINARY
  to start in background and
  sudo start-stop-daemon -K -x $PATH_TO_RADIOBERRY_BINARY
  to stop
